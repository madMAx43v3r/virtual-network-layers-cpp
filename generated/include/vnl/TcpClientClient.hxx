
#ifndef INCLUDE_VNI_GENERATED_vnl_TcpClient_CLIENT_HXX_
#define INCLUDE_VNI_GENERATED_vnl_TcpClient_CLIENT_HXX_

// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/String.h>

#include <vnl/TcpUplinkClient.hxx>


namespace vnl {

class TcpClientClient : public vnl::TcpUplinkClient {
public:
	class Writer : public vnl::TcpUplinkClient::Writer {
	public:
		Writer(vnl::io::TypeOutput& _out, bool _top_level = false) 
			:	vnl::TcpUplinkClient::Writer(_out, false),
				_out(_out), _top_level(_top_level)
		{
			if(_top_level) {
				_out.putEntry(VNL_IO_INTERFACE, VNL_IO_BEGIN);
				_out.putHash(0x48989db4);
			}
		}
		~Writer() {
			if(_top_level) {
				_out.putEntry(VNL_IO_INTERFACE, VNL_IO_END);
			}
		}
		void set_endpoint(const vnl::String& _value) {
			_out.putEntry(VNL_IO_CALL, 1);
			_out.putHash(0x2dc3f0d0);
			vnl::write(_out, _value);
		}
		void set_port(int32_t _value) {
			_out.putEntry(VNL_IO_CALL, 1);
			_out.putHash(0x13e7a893);
			vnl::write(_out, _value);
		}
		void set_autoclose(bool _value) {
			_out.putEntry(VNL_IO_CALL, 1);
			_out.putHash(0x56a15978);
			vnl::write(_out, _value);
		}
		void set_tcp_nodelay(bool _value) {
			_out.putEntry(VNL_IO_CALL, 1);
			_out.putHash(0x4bbaccde);
			vnl::write(_out, _value);
		}
		void set_send_buffer_size(int32_t _value) {
			_out.putEntry(VNL_IO_CALL, 1);
			_out.putHash(0xfd6e8f27);
			vnl::write(_out, _value);
		}
		void set_receive_buffer_size(int32_t _value) {
			_out.putEntry(VNL_IO_CALL, 1);
			_out.putHash(0x998b692c);
			vnl::write(_out, _value);
		}
		void get_endpoint() {
			_out.putEntry(VNL_IO_CONST_CALL, 0);
			_out.putHash(0x2dc3f0d0);
		}
		void get_port() {
			_out.putEntry(VNL_IO_CONST_CALL, 0);
			_out.putHash(0x13e7a893);
		}
		void get_autoclose() {
			_out.putEntry(VNL_IO_CONST_CALL, 0);
			_out.putHash(0x56a15978);
		}
		void get_tcp_nodelay() {
			_out.putEntry(VNL_IO_CONST_CALL, 0);
			_out.putHash(0x4bbaccde);
		}
		void get_send_buffer_size() {
			_out.putEntry(VNL_IO_CONST_CALL, 0);
			_out.putHash(0xfd6e8f27);
		}
		void get_receive_buffer_size() {
			_out.putEntry(VNL_IO_CONST_CALL, 0);
			_out.putHash(0x998b692c);
		}
	protected:
		vnl::io::TypeOutput& _out;
		bool _top_level;
	};
	
	TcpClientClient() {}
	
	TcpClientClient(const TcpClientClient& other) {
		vnl::Client::set_address(other.vnl::Client::get_address());
	}
	
	TcpClientClient(const vnl::Address& addr) {
		vnl::Client::set_address(addr);
	}
	
	TcpClientClient& operator=(const vnl::Address& addr) {
		vnl::Client::set_address(addr);
		return *this;
	}
	
	void set_endpoint(const vnl::String& endpoint) {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.set_endpoint(endpoint);
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CALL);
		if(_pkt) {
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
	}
	
	void set_port(int32_t port) {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.set_port(port);
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CALL);
		if(_pkt) {
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
	}
	
	void set_autoclose(bool autoclose) {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.set_autoclose(autoclose);
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CALL);
		if(_pkt) {
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
	}
	
	void set_tcp_nodelay(bool tcp_nodelay) {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.set_tcp_nodelay(tcp_nodelay);
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CALL);
		if(_pkt) {
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
	}
	
	void set_send_buffer_size(int32_t send_buffer_size) {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.set_send_buffer_size(send_buffer_size);
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CALL);
		if(_pkt) {
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
	}
	
	void set_receive_buffer_size(int32_t receive_buffer_size) {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.set_receive_buffer_size(receive_buffer_size);
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CALL);
		if(_pkt) {
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
	}
	
	vnl::String get_endpoint() {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.get_endpoint();
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CONST_CALL);
		vnl::String _result;
		if(_pkt) {
			vnl::read(_in, _result);
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
		return _result;
	}
	
	int32_t get_port() {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.get_port();
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CONST_CALL);
		int32_t _result;
		if(_pkt) {
			vnl::read(_in, _result);
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
		return _result;
	}
	
	bool get_autoclose() {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.get_autoclose();
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CONST_CALL);
		bool _result;
		if(_pkt) {
			vnl::read(_in, _result);
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
		return _result;
	}
	
	bool get_tcp_nodelay() {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.get_tcp_nodelay();
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CONST_CALL);
		bool _result;
		if(_pkt) {
			vnl::read(_in, _result);
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
		return _result;
	}
	
	int32_t get_send_buffer_size() {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.get_send_buffer_size();
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CONST_CALL);
		int32_t _result;
		if(_pkt) {
			vnl::read(_in, _result);
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
		return _result;
	}
	
	int32_t get_receive_buffer_size() {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.get_receive_buffer_size();
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CONST_CALL);
		int32_t _result;
		if(_pkt) {
			vnl::read(_in, _result);
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
		return _result;
	}
	
};


} // namespace

#endif // INCLUDE_VNI_GENERATED_vnl_TcpClient_CLIENT_HXX_
