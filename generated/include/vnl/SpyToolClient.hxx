
#ifndef INCLUDE_VNI_GENERATED_vnl_SpyTool_CLIENT_HXX_
#define INCLUDE_VNI_GENERATED_vnl_SpyTool_CLIENT_HXX_

// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/String.h>

#include <vnl/ObjectClient.hxx>


namespace vnl {

class SpyToolClient : public vnl::ObjectClient {
public:
	class Writer : public vnl::ObjectClient::Writer {
	public:
		Writer(vnl::io::TypeOutput& _out, bool _top_level = false) 
			:	vnl::ObjectClient::Writer(_out, false),
				_out(_out), _top_level(_top_level)
		{
			if(_top_level) {
				_out.putEntry(VNL_IO_INTERFACE, VNL_IO_BEGIN);
				_out.putHash(0x2d9d1f);
			}
		}
		~Writer() {
			if(_top_level) {
				_out.putEntry(VNL_IO_INTERFACE, VNL_IO_END);
			}
		}
		void set_filter(const vnl::String& expr) {
			_out.putEntry(VNL_IO_CALL, 1);
			_out.putHash(0xedbd102c);
			vnl::write(_out, expr);
		}
		void stop() {
			_out.putEntry(VNL_IO_CALL, 0);
			_out.putHash(0xf2cbfddb);
		}
		void set_dump(bool _value) {
			_out.putEntry(VNL_IO_CALL, 1);
			_out.putHash(0xa6af0deb);
			vnl::write(_out, _value);
		}
		void get_dump() {
			_out.putEntry(VNL_IO_CONST_CALL, 0);
			_out.putHash(0xa6af0deb);
		}
	protected:
		vnl::io::TypeOutput& _out;
		bool _top_level;
	};
	
	SpyToolClient() {}
	
	SpyToolClient(const SpyToolClient& other) {
		vnl::Client::set_address(other.vnl::Client::get_address());
	}
	
	SpyToolClient(const vnl::Address& addr) {
		vnl::Client::set_address(addr);
	}
	
	SpyToolClient& operator=(const vnl::Address& addr) {
		vnl::Client::set_address(addr);
		return *this;
	}
	
	void set_filter(const vnl::String& expr) {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.set_filter(expr);
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CALL);
		if(_pkt) {
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
	}
	
	void stop() {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.stop();
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CALL);
		if(_pkt) {
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
	}
	
	void set_dump(bool dump) {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.set_dump(dump);
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CALL);
		if(_pkt) {
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
	}
	
	bool get_dump() {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.get_dump();
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CONST_CALL);
		bool _result;
		if(_pkt) {
			vnl::read(_in, _result);
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
		return _result;
	}
	
};


} // namespace

#endif // INCLUDE_VNI_GENERATED_vnl_SpyTool_CLIENT_HXX_
