
#ifndef INCLUDE_VNI_GENERATED_vnl_Recorder_CLIENT_HXX_
#define INCLUDE_VNI_GENERATED_vnl_Recorder_CLIENT_HXX_

// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/Array.h>
#include <vnl/String.h>

#include <vnl/ObjectClient.hxx>


namespace vnl {

class RecorderClient : public vnl::ObjectClient {
public:
	class Writer : public vnl::ObjectClient::Writer {
	public:
		Writer(vnl::io::TypeOutput& _out, bool _top_level = false) 
			:	vnl::ObjectClient::Writer(_out, false),
				_out(_out), _top_level(_top_level)
		{
			if(_top_level) {
				_out.putEntry(VNL_IO_INTERFACE, VNL_IO_BEGIN);
				_out.putHash(0xf1cc425);
			}
		}
		~Writer() {
			if(_top_level) {
				_out.putEntry(VNL_IO_INTERFACE, VNL_IO_END);
			}
		}
		void set_filename(const vnl::String& _value) {
			_out.putEntry(VNL_IO_CALL, 1);
			_out.putHash(0xb60d3446);
			vnl::write(_out, _value);
		}
		void set_interval(int32_t _value) {
			_out.putEntry(VNL_IO_CALL, 1);
			_out.putHash(0xd129c896);
			vnl::write(_out, _value);
		}
		void set_header_size(int32_t _value) {
			_out.putEntry(VNL_IO_CALL, 1);
			_out.putHash(0xd7a7ecc4);
			vnl::write(_out, _value);
		}
		void set_domains(const vnl::Array<vnl::String >& _value) {
			_out.putEntry(VNL_IO_CALL, 1);
			_out.putHash(0xea5190a5);
			vnl::write(_out, _value);
		}
		void get_filename() {
			_out.putEntry(VNL_IO_CONST_CALL, 0);
			_out.putHash(0xb60d3446);
		}
		void get_interval() {
			_out.putEntry(VNL_IO_CONST_CALL, 0);
			_out.putHash(0xd129c896);
		}
		void get_header_size() {
			_out.putEntry(VNL_IO_CONST_CALL, 0);
			_out.putHash(0xd7a7ecc4);
		}
		void get_domains() {
			_out.putEntry(VNL_IO_CONST_CALL, 0);
			_out.putHash(0xea5190a5);
		}
	protected:
		vnl::io::TypeOutput& _out;
		bool _top_level;
	};
	
	RecorderClient() {}
	
	RecorderClient(const RecorderClient& other) {
		vnl::Client::set_address(other.vnl::Client::get_address());
	}
	
	RecorderClient(const vnl::Address& addr) {
		vnl::Client::set_address(addr);
	}
	
	RecorderClient& operator=(const vnl::Address& addr) {
		vnl::Client::set_address(addr);
		return *this;
	}
	
	void set_filename(const vnl::String& filename) {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.set_filename(filename);
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CALL);
		if(_pkt) {
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
	}
	
	void set_interval(int32_t interval) {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.set_interval(interval);
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CALL);
		if(_pkt) {
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
	}
	
	void set_header_size(int32_t header_size) {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.set_header_size(header_size);
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CALL);
		if(_pkt) {
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
	}
	
	void set_domains(const vnl::Array<vnl::String >& domains) {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.set_domains(domains);
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CALL);
		if(_pkt) {
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
	}
	
	vnl::String get_filename() {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.get_filename();
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CONST_CALL);
		vnl::String _result;
		if(_pkt) {
			vnl::read(_in, _result);
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
		return _result;
	}
	
	int32_t get_interval() {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.get_interval();
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CONST_CALL);
		int32_t _result;
		if(_pkt) {
			vnl::read(_in, _result);
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
		return _result;
	}
	
	int32_t get_header_size() {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.get_header_size();
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CONST_CALL);
		int32_t _result;
		if(_pkt) {
			vnl::read(_in, _result);
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
		return _result;
	}
	
	vnl::Array<vnl::String > get_domains() {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.get_domains();
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CONST_CALL);
		vnl::Array<vnl::String > _result;
		if(_pkt) {
			vnl::read(_in, _result);
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
		return _result;
	}
	
};


} // namespace

#endif // INCLUDE_VNI_GENERATED_vnl_Recorder_CLIENT_HXX_
