
#ifndef INCLUDE_VNI_GENERATED_vnl_StorageServerBase_HXX_
#define INCLUDE_VNI_GENERATED_vnl_StorageServerBase_HXX_

// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/Address.h>
#include <vnl/Array.h>
#include <vnl/Entry.hxx>
#include <vnl/Hash64.h>
#include <vnl/List.h>
#include <vnl/Object.h>
#include <vnl/Pointer.h>
#include <vnl/String.h>

#include <vnl/Type.hxx>


namespace vnl {

class StorageServerBase : public vnl::Object {
public:
	static const uint32_t VNI_HASH = 0x2362f4c1;
	static const uint32_t NUM_FIELDS = 7;
	
	typedef vnl::Object Super;
	
	
	vnl::String filename;
	bool readonly;
	int32_t interval;
	vnl::List<vnl::Address > topics;
	
	StorageServerBase(const vnl::String& domain_, const vnl::String& topic_);
	
	virtual uint32_t get_vni_hash() const { return VNI_HASH; }
	virtual const char* get_type_name() const { return "vnl.StorageServer"; }
	
	virtual int get_num_fields() const { return NUM_FIELDS; }
	virtual int get_field_index(vnl::Hash32 _hash) const;
	virtual const char* get_field_name(int _index) const;
	virtual void get_field(int _index, vnl::String& _str) const;
	virtual void set_field(int _index, const vnl::String& _str);
	virtual void get_field(int _index, vnl::io::TypeOutput& _out) const;
	virtual void set_field(int _index, vnl::io::TypeInput& _in);
	virtual void get_field(int _index, vnl::Var& _var) const;
	virtual void set_field(int _index, const vnl::Var& _var);
	
protected:
	virtual void delete_entry(const vnl::Hash64& key) = 0;
	virtual void put_entry(const vnl::Pointer<vnl::Entry >& value) = 0;
	virtual vnl::Array<vnl::Pointer<vnl::Entry > > get_entries(const vnl::Array<vnl::Hash64 >& keys) const = 0;
	virtual vnl::Pointer<vnl::Entry > get_entry(const vnl::Hash64& key) const = 0;
	virtual void handle(const vnl::Entry& sample, const vnl::Packet& packet) { handle(sample); }
	virtual void handle(const vnl::Entry& sample, vnl::Basic* input) { handle(sample); }
	virtual void handle(const vnl::Entry& sample) {}
	
	virtual bool vni_call(vnl::io::TypeInput& _in, uint32_t _hash, int _num_args);
	virtual bool vni_const_call(vnl::io::TypeInput& _in, uint32_t _hash, int _num_args, vnl::io::TypeOutput& _out);
	virtual bool handle_switch(vnl::Value* _sample, vnl::Packet* _packet);
	virtual bool handle_switch(vnl::Value* _sample, vnl::Basic* _input);
	
	template<class W>
	void write_fields(W& _writer) const {
		_writer.set_vnl_log_level(vnl_log_level);
		_writer.set_vnl_msg_timeout(vnl_msg_timeout);
		_writer.set_vnl_heartbeat_interval(vnl_heartbeat_interval);
		_writer.set_filename(filename);
		_writer.set_readonly(readonly);
		_writer.set_interval(interval);
		_writer.set_topics(topics);
	}
	
};

} // namespace

#endif // INCLUDE_VNI_GENERATED_vnl_StorageServerBase_HXX_
