
#ifndef INCLUDE_VNI_GENERATED_vnl_Storage_CLIENT_HXX_
#define INCLUDE_VNI_GENERATED_vnl_Storage_CLIENT_HXX_

// AUTO GENERATED by virtual-network-interface codegen

#include <vnl/Array.h>
#include <vnl/Entry.hxx>
#include <vnl/Hash64.h>
#include <vnl/Pointer.h>

#include <vnl/Client.h>


namespace vnl {

class StorageClient : public vnl::Client {
public:
	class Writer {
	public:
		Writer(vnl::io::TypeOutput& _out, bool _top_level = false) 
			:	_out(_out), _top_level(_top_level)
		{
			if(_top_level) {
				_out.putEntry(VNL_IO_INTERFACE, VNL_IO_BEGIN);
				_out.putHash(0xc1f517f6);
			}
		}
		~Writer() {
			if(_top_level) {
				_out.putEntry(VNL_IO_INTERFACE, VNL_IO_END);
			}
		}
		void delete_entry(const vnl::Hash64& key) {
			_out.putEntry(VNL_IO_CALL, 1);
			_out.putHash(0x6be27404);
			vnl::write(_out, key);
		}
		void put_entry(const vnl::Pointer<vnl::Entry >& value) {
			_out.putEntry(VNL_IO_CALL, 1);
			_out.putHash(0x53e783cb);
			vnl::write(_out, value);
		}
		void get_entries(const vnl::Array<vnl::Hash64 >& keys) {
			_out.putEntry(VNL_IO_CONST_CALL, 1);
			_out.putHash(0xdc37fd46);
			vnl::write(_out, keys);
		}
		void get_entry(const vnl::Hash64& key) {
			_out.putEntry(VNL_IO_CONST_CALL, 1);
			_out.putHash(0x2d43064b);
			vnl::write(_out, key);
		}
	protected:
		vnl::io::TypeOutput& _out;
		bool _top_level;
	};
	
	StorageClient() {}
	
	StorageClient(const StorageClient& other) {
		vnl::Client::set_address(other.vnl::Client::get_address());
	}
	
	StorageClient(const vnl::Address& addr) {
		vnl::Client::set_address(addr);
	}
	
	StorageClient& operator=(const vnl::Address& addr) {
		vnl::Client::set_address(addr);
		return *this;
	}
	
	void delete_entry(const vnl::Hash64& key) {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.delete_entry(key);
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CALL);
		if(_pkt) {
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
	}
	
	void put_entry(const vnl::Pointer<vnl::Entry >& value) {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.put_entry(value);
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CALL);
		if(_pkt) {
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
	}
	
	vnl::Array<vnl::Pointer<vnl::Entry > > get_entries(const vnl::Array<vnl::Hash64 >& keys) {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.get_entries(keys);
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CONST_CALL);
		vnl::Array<vnl::Pointer<vnl::Entry > > _result;
		if(_pkt) {
			vnl::read(_in, _result);
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
		return _result;
	}
	
	vnl::Pointer<vnl::Entry > get_entry(const vnl::Hash64& key) {
		_buf.wrap(_data);
		{
			Writer _wr(_out);
			_wr.get_entry(key);
		}
		vnl::Packet* _pkt = _call(vnl::Frame::CONST_CALL);
		vnl::Pointer<vnl::Entry > _result;
		if(_pkt) {
			vnl::read(_in, _result);
			_pkt->ack();
		} else {
			throw vnl::IOException();
		}
		return _result;
	}
	
};


} // namespace

#endif // INCLUDE_VNI_GENERATED_vnl_Storage_CLIENT_HXX_
