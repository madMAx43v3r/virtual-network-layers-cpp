
#ifndef INCLUDE_VNI_GENERATED_vnl_Value_HXX_
#define INCLUDE_VNI_GENERATED_vnl_Value_HXX_

// AUTO GENERATED by virtual-network-interface codegen


#include <vnl/Type.h>


namespace vnl {

class Value : public vnl::Type {
public:
	static const uint32_t VNI_HASH = 0xfdb7a5a8;
	static const uint32_t NUM_FIELDS = 0;
	
	
	
	Value();
	
	static Value* create();
	virtual Value* clone() const;
	virtual bool assign(const vnl::Value& _value);
	virtual void raise() const { throw *this; }
	virtual void destroy();
	
	virtual void serialize(vnl::io::TypeOutput& _out) const;
	virtual void deserialize(vnl::io::TypeInput& _in, int _size);
	
	virtual uint32_t get_vni_hash() const { return VNI_HASH; }
	virtual const char* get_type_name() const { return "vnl.Value"; }
	
	virtual int get_type_size() const { return sizeof(Value); }
	virtual int get_num_fields() const { return NUM_FIELDS; }
	virtual int get_field_index(vnl::Hash32 _hash) const;
	virtual const char* get_field_name(int _index) const;
	virtual void get_field(int _index, vnl::String& _str) const;
	virtual void set_field(int _index, const vnl::String& _str);
	virtual void get_field(int _index, vnl::io::TypeOutput& _out) const;
	virtual void set_field(int _index, vnl::io::TypeInput& _in);
	virtual void get_field(int _index, vnl::Var& _var) const;
	virtual void set_field(int _index, const vnl::Var& _var);
	
	
};

} // namespace

namespace vnl { class Address; }
namespace vnl { class Hash32; }
namespace vnl { class Hash64; }
namespace vnl { class Var; }

namespace vnl {

void read(vnl::io::TypeInput& in, vnl::Address& obj);
void write(vnl::io::TypeOutput& out, const vnl::Address& obj);
void from_string(const vnl::String& str, vnl::Address& obj);
void to_string(vnl::String& str, const vnl::Address& obj);

void read(vnl::io::TypeInput& in, vnl::Hash32& obj);
void write(vnl::io::TypeOutput& out, const vnl::Hash32& obj);
void from_string(const vnl::String& str, vnl::Hash32& obj);
void to_string(vnl::String& str, const vnl::Hash32& obj);

void read(vnl::io::TypeInput& in, vnl::Hash64& obj);
void write(vnl::io::TypeOutput& out, const vnl::Hash64& obj);
void from_string(const vnl::String& str, vnl::Hash64& obj);
void to_string(vnl::String& str, const vnl::Hash64& obj);

void read(vnl::io::TypeInput& in, vnl::Var& obj);
void write(vnl::io::TypeOutput& out, const vnl::Var& obj);
void from_string(const vnl::String& str, vnl::Var& obj);
void to_string(vnl::String& str, const vnl::Var& obj);

} // vnl

#endif // INCLUDE_VNI_GENERATED_vnl_Value_HXX_
